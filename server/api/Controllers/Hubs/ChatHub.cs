using Api.Domain.Dto;
using Api.Domain.HubModels;
using Api.Domain.Interfaces.Bll;
using Api.Domain.ViewModels.Server;
using Microsoft.AspNetCore.SignalR;

namespace Api.Controllers.Hubs
{
    public class ChatHub : Hub
    {
        private readonly SharedDB _shared;
        private readonly IMessageService _messageService;
        private readonly IConnectionUserService _connectionUserService;
        private readonly ISessionService _sessionService;
        public ChatHub(SharedDB shared, IMessageService messageService, IConnectionUserService connectionUserService, ISessionService sessionService)
        {
            _shared = shared;
            _messageService = messageService;
            _connectionUserService = connectionUserService;
            _sessionService = sessionService;
        }
        public async Task<string> SendMessage(string message)
        {
            if (_shared.connections.TryGetValue(Context.ConnectionId, out UserConnection connection))
            {
                await Clients.Group(connection.ChatRoom)
                    .SendAsync("ReceiveSpecificMessage", connection.UserName, message);
                var msg = new MessageVModel()
                {
                    SessionId = connection.SessionId,
                    UserName = connection.UserName,
                    Date = DateTime.Now,
                    Text = message,
                    IsModerated = false,
                    IsProfessional = false,
                    IsAutogenerated = false
                };
                await _messageService.Create(msg);
                return "Sended";
            }
            return "Disconnected";
        }

        public async Task JoinSpecificChatRoom(UserConnection connection)
        {
            try
            {
                await Groups.AddToGroupAsync(Context.ConnectionId, connection.ChatRoom);
                _shared.connections[Context.ConnectionId] = connection;
                await Clients.Group(connection.ChatRoom)
                    .SendAsync("JoinSpecificChatRoom", "ADMIN", $"{connection.UserName} se unió a la sala: {connection.ChatRoom}");
                var msg = new MessageVModel()
                {
                    SessionId = connection.SessionId,
                    UserName = "ADMIN",
                    Date = DateTime.Now,
                    Text = $"{connection.UserName} se unió a la sala: {connection.ChatRoom}",
                    IsModerated = false,
                    IsProfessional = false,
                    IsAutogenerated = true
                };
                await _messageService.Create(msg);

                var connUser = new ConnectionUserDTO()
                {
                    SessionId = connection.SessionId,
                    UserName = connection.UserName,
                    ConnectionId = Context.ConnectionId
                };
                await _connectionUserService.Create(connUser);
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public async Task LeaveChatRoom(UserConnection connection)
        {
            try
            {
                await Clients.Group(connection.ChatRoom)
                    .SendAsync("ReceiveSpecificMessage", "ADMIN", $"{connection.UserName} salió de la sala: {connection.ChatRoom}");
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, connection.ChatRoom);
                var msg = new MessageVModel()
                {
                    SessionId = connection.SessionId,
                    UserName = "ADMIN",
                    Date = DateTime.Now,
                    Text = $"{connection.UserName} salió de la sala: {connection.ChatRoom}",
                    IsModerated = false,
                    IsProfessional = false,
                    IsAutogenerated = true
                };
                await _messageService.Create(msg);
                await _connectionUserService.Delete(Context.ConnectionId);
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public async Task CloseChatRoom(UserConnection connection)
        {
            try
            {
                await Clients.Group(connection.ChatRoom)
                    .SendAsync("ReceiveSpecificMessage", "ADMIN", $"{connection.UserName} cerró la sesión de la sala: {connection.ChatRoom}");
                var users = await _connectionUserService.GetAllBySessionId(connection.SessionId);
                if (users != null)
                {
                    foreach (var user in users)
                    {
                        await Groups.RemoveFromGroupAsync(user.ConnectionId, connection.ChatRoom);
                        await _connectionUserService.Delete(user.ConnectionId);
                        _shared.connections.Remove(user.ConnectionId, out UserConnection connection1);
                    }
                }
                var msg = new MessageVModel()
                {
                    SessionId = connection.SessionId,
                    UserName = "ADMIN",
                    Date = DateTime.Now,
                    Text = $"{connection.UserName} cerró la sesión de la sala: {connection.ChatRoom}",
                    IsModerated = false,
                    IsProfessional = false,
                    IsAutogenerated = true
                };
                await _messageService.Create(msg);
                await _sessionService.CloseSession(connection.SessionId);
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
}
