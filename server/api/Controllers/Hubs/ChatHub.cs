using Api.Domain.HubModels;
using Api.Domain.Interfaces.Bll;
using Api.Domain.ViewModels.Server;
using Microsoft.AspNetCore.SignalR;

namespace Api.Controllers.Hubs
{
    public class ChatHub : Hub
    {

        private readonly SharedDB _shared;
        private readonly IMessageService _messageService;
        public ChatHub(SharedDB shared, IMessageService messageService)
        {
            _shared = shared;
            _messageService = messageService;
        }
        public async Task SendMessage(string message)
        {
            if (_shared.connections.TryGetValue(Context.ConnectionId, out UserConnection connection))
            {
                await Clients.Group(connection.ChatRoom)
                    .SendAsync("ReceiveSpecificMessage", connection.UserName, message);
                var msg = new MessageVModel()
                {
                    SessionId = connection.SessionId,
                    UserName = connection.UserName,
                    Date = DateTime.Now,
                    Text = message,
                    Moderated = false,
                    Professional = false,
                    Autogenerated = false
                };
                await _messageService.Create(msg);
            }
        }

        public async Task JoinSpecificChatRoom(UserConnection connection)
        {
            await Groups.AddToGroupAsync(Context.ConnectionId, connection.ChatRoom);
            _shared.connections[Context.ConnectionId] = connection;
            await Clients.Group(connection.ChatRoom)
                .SendAsync("JoinSpecificChatRoom", "ADMIN", $"{connection.UserName} se unió a la sala: {connection.ChatRoom}");
            var msg = new MessageVModel()
            {
                SessionId = connection.SessionId,
                UserName = "ADMIN",
                Date = DateTime.Now,
                Text = $"{connection.UserName} se unió a la sala: {connection.ChatRoom}",
                Moderated = false,
                Professional = true,
                Autogenerated = true
            };
            await _messageService.Create(msg);
        }
    }
}
